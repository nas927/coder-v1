{
  "replaceTextInSheet": {
    "description": "Remplacer un texte dans toute la feuille",
    "function_code": [
      "function replaceTextInSheet() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const data = sheet.getDataRange();",
      "  data.createTextFinder(\"{oldText}\").replaceAllWith(\"{newText}\");",
      "}"
    ],
    "examples": [
      {"input_data": {"oldText": "Brouillon", "newText": "Validé"}, "prompts": ["Remplace tous les \"Brouillon\" par \"Validé\" dans ma feuille.", "Peux-tu remplacer 'Brouillon' par 'Validé' partout dans la feuille active ?"]},
      {"input_data": {"oldText": "Non payé", "newText": "Payé"}, "prompts": ["Je veux changer tous les \"Non payé\" en \"Payé\" dans la feuille actuelle."]},
      {"input_data": {"oldText": "En attente", "newText": "Traitée"}, "prompts": ["Peux-tu écrire une fonction qui remplace toutes les occurrences de \"En attente\" par \"Traitée\" ?"]},
      {"input_data": {"oldText": "Inactif", "newText": "Actif"}, "prompts": ["Modifie toutes les cellules contenant \"Inactif\" pour qu’elles affichent \"Actif\" à la place."]},
      {"input_data": {"oldText": "Temporaire", "newText": "Permanent"}, "prompts": ["J’ai besoin de remplacer chaque \"Temporaire\" par \"Permanent\" dans le tableau."]},
      {"input_data": {"oldText": "Erreur", "newText": "Corrigé"}, "prompts": ["Crée une fonction qui change \"Erreur\" en \"Corrigé\" dans toutes les cellules de la feuille active."]},
      {"input_data": {"oldText": "Ancien", "newText": "Nouveau"}, "prompts": ["Dans mon Google Sheet, je veux que tous les \"Ancien\" soient remplacés par \"Nouveau\"."]},
      {"input_data": {"oldText": "À faire", "newText": "Terminé"}, "prompts": ["Fais un script qui cherche \"À faire\" et remplace par \"Terminé\" dans toutes les lignes."]},
      {"input_data": {"oldText": "Client potentiel", "newText": "Client confirmé"}, "prompts": ["Remplacer automatiquement \"Client potentiel\" par \"Client confirmé\" dans la feuille actuelle."]},
      {"input_data": {"oldText": "Rupture", "newText": "En stock"}, "prompts": ["Je souhaite qu’un script mette \"En stock\" à la place de \"Rupture\" partout dans le document."]}
    ]
  },
  "addRowToSheet": {
    "description": "Ajouter une ligne avec des valeurs données à la fin de la feuille",
    "function_code": [
      "function addRowToSheet() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  sheet.appendRow({rows});",
      "}"
    ],
    "examples": [
      {"input_data": {"rows": "[\"Jean Dupont\", \"Marketing\", \"Actif\"]"},
      "table_data": ["nom_service_statut"],
      "prompts": [
        "Ajoute une nouvelle ligne avec \"Jean Dupont\", \"Marketing\" et \"Actif\" dans ma feuille Google Sheets.",
        "Peux-tu m'insèrer une ligne à la fin avec les données : \"Jean Dupont\", \"Marketing\", \"Actif\" ?",
        "Je veux un script qui ajoute une ligne contenant \"Jean Dupont\", \"Marketing\" et \"Actif\" dans la feuille actuelle.",
        "Insère automatiquement une ligne en bas avec \"Jean Dupont\", \"Marketing\", \"Actif\".",
        "Remplis une nouvelle ligne avec les valeurs suivantes : nom = \"Jean Dupont\", service = \"Marketing\", statut = \"Actif\".",
        "Crée une fonction qui ajoute une entrée à la feuille : \"Jean Dupont\", \"Marketing\", \"Actif\".",
        "Ajoute une ligne à la fin du tableau avec ces informations : \"Jean Dupont\", \"Marketing\", \"Actif\".",
        "J’ai besoin d’un script pour écrire \"Jean Dupont\", \"Marketing\", \"Actif\" sur une nouvelle ligne.",
        "Programme un ajout de ligne avec ces champs : \"Jean Dupont\", \"Marketing\", \"Actif\".",
        "Je veux insérer une nouvelle ligne à la fin contenant \"Jean Dupont\", \"Marketing\", \"Actif\"."
      ]},
      {"input_data": {"rows": "[\"Ecran Dell\", \"245\", \"1\", \"Recommandé\"]"},
      "table_data": ["addRowToSheet2"],
      "prompts": [
        "Ajoute une nouvelle ligne avec \"Ecran Dell\", \"245\", \"1\" et \"Recommandé\" dans ma feuille Google Sheets.",
        "Peux-tu m'insèrer une ligne à la fin avec les données : \"Ecran Dell\", \"245\", \"1\" et \"Recommandé\" ?",
        "Je veux un script qui ajoute une ligne contenant \"Ecran Dell\", \"245\", \"1\" et \"Recommandé\" dans la feuille actuelle.",
        "Insère automatiquement une ligne en bas avec \"Ecran Dell\", \"245\", \"1\", \"Recommandé\".",
        "Remplis une nouvelle ligne avec les valeurs suivantes : nom du produit = \"Ecran Dell\", prix = \"245\", quantite = \"1\" et statut = \"Recommandé\".",
        "Crée une fonction qui ajoute une entrée à la feuille : \"Ecran Dell\", \"245\", \"1\" et \"Recommandé\".",
        "Ajoute une ligne à la fin du tableau avec ces informations : \"Ecran Dell\", \"245\", \"1\" et \"Recommandé\".",
        "J’ai besoin d’un script pour écrire \"Ecran Dell\", \"245\", \"1\" et \"Recommandé\" sur une nouvelle ligne.",
        "Programme un ajout de ligne avec ces champs : \"Ecran Dell\", \"245\", \"1\", \"Recommandé\".",
        "Je veux insérer une nouvelle ligne à la fin contenant \"Ecran Dell\", \"245\", \"1\", \"Recommandé\"."
      ]}
    ]
  },
  "sortByName": {
    "description": "Trier les données par nom",
    "function_code": [
      "function sortByName() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort({sort_params});",
      "}"
    ],
    "examples": [
      {"input_data": {"sort_params": "{ column: 1, ascending: true }"},
      "table_data": ["people1", "people2"],
      "prompts": [
        "Trie les données par nom en ordre alphabétique.",
        "Peux-tu trier la première colonne par ordre croissant ?",
        "Je veux organiser les lignes selon les noms (ordre A à Z).",
        "Fais un tri croissant sur la colonne des noms.",
        "Classe les données par ordre alphabétique sur la première colonne."
      ]},
      {"input_data": {"sort_params": "{ column: 2, ascending: true }"},
      "table_data": ["people1", "people2"],
      "prompts": [
        "Trie les données par prénom en ordre alphabétique.",
        "Peux-tu trier la seconde colonne par ordre croissant ?",
        "Je veux organiser les lignes selon les prénoms (ordre A à Z).",
        "Fais un tri croissant sur la colonne des prénoms.",
        "Classe les données par ordre alphabétique sur la seconde colonne."
      ]},
      {"input_data": {"sort_params": "{ column: 1, ascending: false }"},
      "table_data": ["people1", "people2"],
      "prompts": [
        "Trie les données par nom en ordre alphabétique décroissant.",
        "Peux-tu trier la première colonne par ordre décroissant ?",
        "Je veux organiser les lignes selon les noms (ordre Z à A).",
        "Fais un tri décroissant sur la colonne des noms.",
        "Classe les données par ordre alphabétique (mais inversé) sur la première colonne.",
        "Tri par ordre décroissant les noms des clients."
      ]},
      {"input_data": {"sort_params": "{ column: 2, ascending: false }"},
      "table_data": ["people1", "people2"],
      "prompts": [
        "Trie les données par prénom en ordre alphabétique décroissant.",
        "Peux-tu trier la seconde colonne par ordre décroissant ?",
        "Je veux organiser les lignes selon les prénoms (ordre Z à A).",
        "Fais un tri décroissant sur la colonne des prénoms.",
        "Classe les données par ordre alphabétique (mais inversé) sur la seconde colonne.",
        "Tri par ordre décroissant les prénoms des clients."
      ]}
    ]
  },
  "sortByDate": {
    "description": "Trier les lignes par date",
    "function_code": [
      "function sortByDateDesc() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort({sort_params});",
      "}"
    ],
    "examples": [
      {"input_data": {"sort_params": "{ column: 5, ascending: true }"},
      "table_data": ["order_tracking"],
      "prompts": [
        "Trie les lignes par date de plus ancienne à plus récente.",
        "Classe les données de la colonne 5 en ordre croissant.",
        "Je veux trier le tableau par date, la plus récente en bas.",
        "Je veux trier le tableau par date, la plus ancienne en haut.",
        "Peux-tu trier les lignes en fonction des dates ?",
        "Ordonne la feuille selon la colonne des dates, du plus ancien au plus récent.",
        "Peux-tu trier le tableau par performance, ordre croissant ?",
        "Ordonne les données en fonction des dates de la colonne 5, de la plus petite a la plus grande."
      ]},
      {"input_data": {"sort_params": "{ column: 5, ascending: false }"},
      "table_data": ["order_tracking"],
      "prompts": [
        "Trie les lignes par date de plus récente à plus ancienne.",
        "Classe les données de la colonne 5 en ordre décroissant.",
        "Je veux trier le tableau par date, la plus récente en haut.",
        "Je veux trier le tableau par date, la plus ancienne en bas.",
        "Peux-tu trier les lignes en fonction des dates (ordre inverse) ?",
        "Ordonne la feuille selon la colonne des dates, du plus récent au plus ancien.",
        "Peux-tu trier le tableau par performance, ordre décroissant ?",
        "Ordonne les données en fonction des dates de la colonne 5, de la plus grande a la plus petite."
      ]}
    ]
  },
  "sortByStatus": {
    "description": "Trier la colonne du statut par ordre alphabétique",
    "function_code": [
      "function sortByStatus() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort({sort_params});",
      "}"
    ],
    "examples": [
      {"input_data": {"sort_params": "{ column: 4, ascending: true }"},
      "table_data": ["events1"],
      "prompts": [
        "Trie la colonne du statut par ordre alphabétique.",
        "Organise les lignes selon les statuts.",
        "Je veux trier les données en fonction de la colonne \"Statut\".",
        "Effectue un tri croissant sur la 4e colonne.",
        "Trie le statut par ordre croissant"
      ]},
      {"input_data": {"sort_params": "{ column: 3, ascending: true }"},
      "table_data": ["nom_service_statut"],
      "prompts": [
        "Trie la colonne du statut par ordre alphabétique.",
        "Organise les lignes selon les statuts.",
        "Je veux trier les données en fonction de la colonne \"Statut\".",
        "Effectue un tri croissant sur la 3e colonne.",
        "Trie le statut par ordre croissant"
      ]},
      {"input_data": {"sort_params": "{ column: 6, ascending: true }"},
      "table_data": ["order_tracking"],
      "prompts": [
        "Trie la colonne du statut par ordre alphabétique.",
        "Organise les lignes selon les statuts.",
        "Je veux trier les données en fonction de la colonne \"Statut\".",
        "Effectue un tri croissant sur la 6e colonne.",
        "Trie le statut par ordre croissant"
      ]}
    ]
  },
  "sortByDepartementAndName": {
    "description": "Trier d’abord par departement puis par nom",
    "function_code": [
      "function sortByDepartementAndName() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort([",
      "    {sort_params_1},",
      "    {sort_params_2}",
      "  ]);",
      "}"
    ],
    "examples": [
      {"input_data": {
            "sort_params_1": "{ column: 3, ascending: true }",
            "sort_params_2": "{ column: 1, ascending: true }"
        },
      "table_data": ["cities1", "cities2"],
      "prompts": [
        "Trie d’abord par département, puis par nom.",
        "Classe les données par service, et ensuite par ordre alphabétique du nom.",
        "Peux-tu organiser les lignes en fonction du département, puis du nom ?",
        "Je veux un tri croisé : d’abord la colonne 3, ensuite la 1.",
        "Ordonne le tableau par département (col. 3), puis par nom (col. 1).",
        "Trie les villes par département puis par leur nom",
        "Trie les données d’abord par numero du departement, ensuite par ville"
      ]}
    ]
  },
  "sortByAreaAndName": {
    "description": "Trier d’abord par superficie puis par nom",
    "function_code": [
      "function sortByAreaAndName() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort([",
      "    {sort_params_1},",
      "    {sort_params_2}",
      "  ]);",
      "}"
    ],
    "examples": [
      {"input_data": {
            "sort_params_1": "{ column: 6, ascending: true }",
            "sort_params_2": "{ column: 1, ascending: true }"
        },
      "table_data": ["cities1", "cities2"],
      "prompts": [
        "Trie d’abord par superficie, puis par nom.",
        "Classe les données par taille de la ville, et ensuite par ordre alphabétique du nom.",
        "Peux-tu organiser les lignes en fonction de la superficie, puis du nom ?",
        "Je veux un tri croisé : d’abord la colonne 6, ensuite la 1.",
        "Ordonne le tableau par superficie (col. 6), puis par nom (col. 1).",
        "Trie les villes par tailles puis par leur nom",
        "Trie les données d’abord par superficie, ensuite par ville"
      ]}
    ]
  },
  "sortByScore": {
    "description": "Trier par score décroissant",
    "function_code": [
      "function sortByScore() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort({sort_params});",
      "}"
    ],
    "examples": [
      {"input_data": {"sort_params": "{ column: 3, ascending: false }"},
      "table_data": ["score_tracking"],
      "prompts": [
        "Trie par score décroissant (du plus élevé au plus bas).",
        "Classe les lignes selon la colonne des notes, du plus haut au plus bas.",
        "Je veux que les meilleurs scores soient en haut du tableau.",
        "Peux-tu trier le tableau par performance, ordre décroissant ?",
        "Ordonne les données en fonction des scores de la colonne 3, du plus grand au plus petit.",
        "Effectue un tri décroissant sur la 3e colonne."
      ]}
    ]
  },
  "sortByBalance": {
    "description": "Trier les données par solde des clients",
    "function_code": [
      "function sortByBalance() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  range.sort({sort_params});",
      "}"
    ],
    "examples": [
      {"input_data": {"sort_params": "{ column: 5, ascending: true }"},
      "table_data": ["bank_accounts"],
      "prompts": [
        "Trie les données par solde dans l'ordre croissant.",
        "Peux-tu trier la cinquième colonne par ordre croissant ?",
        "Je veux organiser les lignes selon la solde des clients.",
        "Fais un tri croissant sur la colonne des solde.",
        "Classe les données par solde.",
        "Applique un tri croissant sur la colonne des soldes, en veillant à ne pas dissocier les autres informations des clients"
      ]},
      {"input_data": {"sort_params": "{ column: 5, ascending: false }"},
      "table_data": ["bank_accounts"],
      "prompts": [
        "Trie les données par solde dans l'ordre décroissant.",
        "Peux-tu trier la cinquième colonne par ordre décroissant ?",
        "Je veux organiser les lignes selon la solde des clients (ordre décroissant).",
        "Fais un tri décroissant sur la colonne des solde.",
        "Classe les données par solde dans l'ordre décroissant.",
        "Applique un tri décroissant sur la colonne des soldes, en veillant à ne pas dissocier les autres informations des clients"
      ]}
    ]
  },
  "createNewSheet": {
    "description": "Créer une nouvelle feuille nommée 'Transactions'",
    "function_code": [
      "function createNewSheet() {",
      "  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();",
      "  spreadsheet.insertSheet({sheetName});",
      "}"
    ],
    "examples": [
      {"input_data": {"sheetName": "Transactions"}, "prompts": [
        "Crée une nouvelle feuille nommée \"Transactions\".",
        "Ajoute un onglet appelé \"Transactions\" dans mon Google Sheets.",
        "Ajoute un nouvel onglet \"Transactions\".",
        "Peux-tu créer une feuille vide avec le nom \"Transactions\" ?",
        "J’ai besoin d’un nouvel onglet intitulé \"Transactions\".",
        "Génère une nouvelle feuille nommée \"Transactions\" dans ce fichier."
      ]}
    ]
  },
  "renameSheetToClients": {
    "description": "Renommer la feuille actuelle en 'Clients'",
    "function_code": [
      "function renameSheetToClients() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  sheet.setName({sheetName});",
      "}"
    ],
    "examples": [
      {"input_data": {"sheetName": "Clients"}, "prompts": [
        "Renomme la feuille actuelle en \"Clients\".",
        "Change le nom de l’onglet actif en \"Clients\".",
        "Je veux que la feuille s’appelle maintenant \"Clients\".",
        "Mets \"Clients\" comme nom de la feuille actuelle.",
        "Modifie le nom de la feuille en \"Clients\"."
      ]}
    ]
  },
  "createSheetIfNotExists": {
    "description": "Créer la feuille si elle n’existe pas déjà",
    "function_code": [
      "function createSheetIfNotExists() {",
      "  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();",
      "  const sheetName = {sheetName};",
      "  if (!spreadsheet.getSheetByName(sheetName)) {",
      "    spreadsheet.insertSheet(sheetName);",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"sheetName": "Bilan 2025"}, "prompts": [
        "Crée la feuille \"Bilan 2025\" si elle n’existe pas déjà.",
        "Je veux un onglet nommé \"Bilan 2025\", mais uniquement s’il n’est pas présent.",
        "Ajoute une feuille \"Bilan 2025\" uniquement si elle n'existe pas encore.",
        "Vérifie si la feuille \"Bilan 2025\" existe, sinon crée-la.",
        "Gère l’ajout de \"Bilan 2025\" uniquement si nécessaire."
      ]}
    ]
  },
  "deleteDuplicateRows": {
    "description": "Supprimer toutes les lignes dupliquées dans la feuille actuelle",
    "function_code": [
      "function deleteDuplicateRows() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const data = sheet.getDataRange().getValues();",
      "  const uniqueData = [];",
      "  const seen = new Set();",
      "  for (let i = 0; i < data.length; i++) {",
      "    const row = data[i].join();",
      "    if (!seen.has(row)) {",
      "      seen.add(row);",
      "      uniqueData.push(data[i]);",
      "    }",
      "  }",
      "  sheet.clearContents();",
      "  sheet.getRange(1, 1, uniqueData.length, uniqueData[0].length).setValues(uniqueData);",
      "}"
    ],
    "examples": [
      {"prompts": [
        "Supprime toutes les lignes dupliquées dans la feuille actuelle.",
        "Enlève les doublons dans mon tableau Google Sheets.",
        "Peux-tu nettoyer la feuille en supprimant les lignes en double ?",
        "Garde seulement les lignes uniques dans l’onglet actif.",
        "Je veux retirer toutes les doublons et conserver une seule occurrence.",
        "Crée un script pour effacer les doublons dans toutes les colonnes.",
        "Écris une fonction pour supprimer les lignes identiques dans la feuille.",
        "Élimine les entrées dupliquées dans mon tableau.",
        "Nettoie les doublons de la feuille actuelle sans toucher au formatage.",
        "Je veux une fonction qui détecte et supprime toutes les lignes en double.",
        "Supprime les doublons dans toutes les colonnes de mon tableau.",
        "Je veux nettoyer la feuille en gardant uniquement les lignes uniques.",
        "Détecte les lignes répétées et supprime-les automatiquement.",
        "Peux-tu me faire une fonction pour retirer les lignes en double dans ce fichier ?",
        "Retire tous les doublons de cette feuille Google Sheets."
      ]}
    ]
  },
  "sendEmailFromSheet": {
    "description": "Envoyer un e-mail à partir des colonnes A, B, C de la feuille",
    "function_code": [
      "function sendEmailFromSheet() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const row = sheet.getRange(2, 1, 1, 3).getValues()[0]; // A2:C2",
      "  const email = row[0];",
      "  const subject = row[1];",
      "  const message = row[2];",
      "  MailApp.sendEmail(email, subject, message);",
      "}"
    ],
    "examples": [
      {"input_data": {},
      "table_data": [],
      "prompts": [
        "Envoie un e-mail à l’adresse en colonne A, avec l’objet en B et le message en C.",
        "Je veux un script qui lit la ligne 2 et envoie un e-mail avec les infos.",
        "Peux-tu faire une fonction qui utilise les colonnes A, B et C pour envoyer un e-mail ?",
        "Utilise la première ligne de données pour envoyer un e-mail automatiquement.",
        "Crée une fonction qui envoie un message à l’adresse indiquée en A2.",
        "Génère un script pour envoyer un mail en prenant les infos de la ligne 2.",
        "Lis l’adresse email en A2, l’objet en B2, le contenu en C2, puis envoie un mail.",
        "J’aimerais envoyer un e-mail automatique depuis Google Sheets en utilisant les colonnes A, B, et C.",
        "Fait un script qui prend les infos de la deuxième ligne pour envoyer un email simple.",
        "Envoie un message automatiquement à partir des données saisies dans la ligne 2.",
        "Envoie un mail à partir des infos de la feuille : email, sujet, message.",
        "Automatise l’envoi d’un email simple en utilisant les colonnes A, B et C."
      ]}
    ]
  },
  "createCalendarEvent": {
    "description": "Créer un événement dans Google Agenda à partir de la ligne 2 de la feuille",
    "function_code": [
      "function createCalendarEvent() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const row = sheet.getRange({range}).getValues()[0];",
      "  const title = row[{title_col}];",
      "  const start = new Date(row[{start_col}]);",
      "  const end = new Date(row[{end_col}]);",
      "  const calendar = CalendarApp.getDefaultCalendar();",
      "  calendar.createEvent(title, start, end);",
      "}"
    ],
    "examples": [
      {"input_data": {"range": "2, 1, 1, 3", "title_col": "0", "start_col": "1", "end_col": "2"},
      "table_data": ["events1"],
      "prompts": [
        "Crée un événement dans mon agenda en utilisant la ligne 2 de la feuille.",
        "Ajoute un événement avec le titre en A2, le début en B2 et la fin en C2.",
        "Je veux planifier un événement Google Agenda à partir de données dans le tableau.",
        "Peux-tu générer un script qui lit le nom, la date de début et de fin dans la ligne 2 ?",
        "Lis les infos en A2, B2, et C2, puis ajoute-les à mon calendrier.",
        "Programme une fonction qui crée un événement Google Calendar depuis une feuille Google Sheets.",
        "Ajoute un événement intitulé selon la colonne A, débutant à la date en B, et se terminant à la date en C.",
        "Utilise la deuxième ligne de ma feuille pour ajouter un événement à Google Agenda.",
        "Je veux qu’un événement soit créé automatiquement depuis la ligne 2.",
        "Insère un événement dans mon agenda en lisant les colonnes A, B et C.",
        "Ajoute automatiquement un événement basé sur les infos dans la feuille (nom, date début, date fin).",
        "Gère l’ajout d’un événement avec comme titre la valeur de A2, début B2, fin C2."
      ]},
      {"input_data": {"range": "2, 1, 1, 4", "title_col": "0", "start_col": "2", "end_col": "3"},
      "table_data": ["events2"],
      "prompts": [
        "Crée un événement dans mon agenda en utilisant la ligne 2 de la feuille.",
        "Ajoute un événement avec le titre en A2, le début en C2 et la fin en D2.",
        "Je veux planifier un événement Google Agenda à partir de données dans le tableau.",
        "Peux-tu générer un script qui lit le nom, la date de début et de fin dans la ligne 2 ?",
        "Lis les infos en A2, C2, et D2, puis ajoute-les à mon calendrier.",
        "Programme une fonction qui crée un événement Google Calendar depuis une feuille Google Sheets.",
        "Ajoute un événement intitulé selon la colonne A, débutant à la date en B, et se terminant à la date en C.",
        "Utilise la deuxième ligne de ma feuille pour ajouter un événement à Google Agenda.",
        "Je veux qu’un événement soit créé automatiquement depuis la ligne 2.",
        "Insère un événement dans mon agenda en lisant les colonnes A, B et C.",
        "Ajoute automatiquement un événement basé sur les infos dans la feuille (nom, date début, date fin).",
        "Gère l’ajout d’un événement avec comme titre la valeur de A2, début C2, fin D2."
      ]}
    ]
  },
  "addColumnsAndStoreInNew": {
    "description": "Ajoute les valeurs de deux colonnes et stocke le résultat dans une nouvelle colonne.",
    "function_code": [
      "function addColumnsAndStoreInNew() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const data = sheet.getDataRange();",
      "  const numRows = data.getNumRows();",
      "  for (let i = 2; i <= numRows; i++) {",
      "      const col{column_A} = data.getRange(i, {column_A}).getValue();",
      "      const col{column_B} = data.getRange(i, {column_B}).getValue();",
      "      const result = col{column_A} + col{column_B};",
      "      data.getRange(i, {column_result}).setValue(result);",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column_A": "1", "column_B": "5", "column_result": "4"},
        "prompts": [
            "Je veux afficher le resultat de la multiplication de la 1er colonne par la 5e dans la 4e colonne.",
            "Ajoute les colonnes 1 et 5 et écris le résultat dans la colonne 4.",
            "Calcule le produit de la colonne A et de la colonne E, puis mets-le dans la colonne D.",
            "Pour chaque ligne, ajoute la première colonne par la troisième et stocke le résultat dans la cinquième colonne.",
            "Remplis la colonne D avec le résultat de A + E pour chaque ligne."
        ]
      },
      {"input_data": {"column_A": "1", "column_B": "2", "column_result": "4"},
        "prompts": [
            "Je veux afficher le resultat de la multiplication de la 1er colonne par la 2e dans la 4e colonne.",
            "Ajoute les colonnes 1 et 2 et écris le résultat dans la colonne 4.",
            "Calcule le produit de la colonne A et de la colonne B, puis mets-le dans la colonne D.",
            "Pour chaque ligne, ajoute la première colonne par la troisième et stocke le résultat dans la deuxième colonne.",
            "Remplis la colonne D avec le résultat de A + B pour chaque ligne."
        ]
      }
    ]
  },
  "multiplyColumnsAndStoreInNew": {
    "description": "Multiplie les valeurs de deux colonnes et stocke le résultat dans une nouvelle colonne.",
    "function_code": [
      "function multiplyColumnsAndStoreInNew() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const data = sheet.getDataRange();",
      "  const numRows = data.getNumRows();",
      "  for (let i = 2; i <= numRows; i++) {",
      "      const col{column_A} = data.getRange(i, {column_A}).getValue();",
      "      const col{column_B} = data.getRange(i, {column_B}).getValue();",
      "      const result = col{column_A} * col{column_B};",
      "      data.getRange(i, {column_result}).setValue(result);",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column_A": "1", "column_B": "5", "column_result": "4"},
        "prompts": [
            "Je veux afficher le resultat de la multiplication de la 1er colonne par la 5e dans la 4e colonne.",
            "Multiplie les colonnes 1 et 5 et écris le résultat dans la colonne 4.",
            "Calcule le produit de la colonne A et de la colonne E, puis mets-le dans la colonne D.",
            "Pour chaque ligne, multiplie la première colonne par la troisième et stocke le résultat dans la cinquième colonne.",
            "Remplis la colonne D avec le résultat de A * E pour chaque ligne."
        ]
      },
      {"input_data": {"column_A": "1", "column_B": "3", "column_result": "4"},
        "prompts": [
            "Je veux afficher le resultat de la multiplication de la 1er colonne par la 3e dans la 4e colonne.",
            "Multiplie les colonnes 1 et 3 et écris le résultat dans la colonne 4.",
            "Calcule le produit de la colonne A et de la colonne C, puis mets-le dans la colonne D.",
            "Pour chaque ligne, multiplie la première colonne par la troisième et stocke le résultat dans la quatrième colonne.",
            "Remplis la colonne D avec le résultat de A * C pour chaque ligne."
        ]
      }
    ]
  },
  "averageColumnsAndStoreInNew": {
    "description": "Calcule la moyenne de deux colonnes et stocke le résultat dans une nouvelle colonne.",
    "function_code": [
      "function averageColumnsAndStoreInNew() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const data = sheet.getDataRange();",
      "  const numRows = data.getNumRows();",
      "  for (let i = 2; i <= numRows; i++) {",
      "      const col{column_A} = data.getRange(i, {column_A}).getValue();",
      "      const col{column_B} = data.getRange(i, {column_B}).getValue();",
      "      const result = (col{column_A} + col{column_B}) / 2;",
      "      data.getRange(i, {column_result}).setValue(result);",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column_A": "2", "column_B": "3", "column_result": "5"},
        "prompts": [
          "Calcule la moyenne des colonnes 2 et 3 et écris le résultat dans la colonne 5.",
          "Pour chaque ligne, fais la moyenne de la colonne B et de la colonne C, puis mets-la dans la colonne E.",
          "Remplis la colonne E avec la moyenne de B et C pour chaque ligne.",
          "Fais la moyenne des colonnes 2 et 3 et stocke le résultat dans la 5e colonne."
        ]
      }
    ]
  },
  "duplicateActiveSheet": {
    "description": "Duplique la feuille active sous un nouveau nom.",
    "function_code": [
      "function duplicateActiveSheet() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const newSheet = sheet.copyTo(SpreadsheetApp.getActiveSpreadsheet());",
      "  newSheet.setName({newSheetName});",
      "}"
    ],
    "examples": [
      {"input_data": {"newSheetName": "sheet.getName() + ' Copie'"},
        "prompts": [
          "Duplique la feuille active.",
          "Crée une copie de la feuille actuelle.",
          "Fais un duplicata de l’onglet actif.",
          "Copie la feuille actuel vers une nouvelle feuille."
        ]
      },
      {"input_data": {"newSheetName": "'Copie Feuille'"},
        "prompts": [
          "Duplique la feuille active et nomme la nouvelle feuille 'Copie Feuille'.",
          "Crée une copie de la feuille actuelle sous le nom 'Copie Feuille'.",
          "Fais un duplicata de l’onglet actif et appelle-le 'Copie Feuille'.",
          "Copie la feuille actuel vers une nouvelle feuille nomme 'Copie Feuille'."
        ]
      },
      {"input_data": {"newSheetName": "'Factures Copie'"},
        "prompts": [
          "Duplique la feuille active et nomme la nouvelle feuille 'Factures Copie'.",
          "Crée une copie de la feuille actuelle sous le nom 'Factures Copie'.",
          "Fais un duplicata de l’onglet actif et appelle-le 'Factures Copie'.",
          "Copie la feuille actuel vers une nouvelle feuille nomme 'Factures Copie'."
        ]
      }
    ]
  },
  "protectActiveSheet": {
    "description": "Protège la feuille active contre l’édition.",
    "function_code": [
      "function protectActiveSheet() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  sheet.protect().setDescription('Feuille protégée');",
      "}"
    ],
    "examples": [
      {"input_data": {},
        "prompts": [
          "Protège la feuille active contre toute modification.",
          "Empêche l’édition de la feuille actuelle.",
          "Rends la feuille active non modifiable.",
          "Désactive les modifications de la feuille actuelle.",
          "Empêche tout changement sur l'onglet actif."
        ]
      }
    ]
  },
  "boldIfAboveThreshold": {
    "description": "Met en gras toutes les cellules d’une colonne si leur valeur dépasse un seuil.",
    "function_code": [
      "function boldIfAboveThreshold() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const column = {column};",
      "  const threshold = {threshold};",
      "  const numRows = sheet.getLastRow();",
      "  for (let i = 1; i <= numRows; i++) {",
      "    const cell = sheet.getRange(i, column);",
      "    if (cell.getValue() > threshold) {",
      "      cell.setFontWeight('bold');",
      "    }",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column": "4", "threshold": "1000"},
        "prompts": [
          "Mets en gras toutes les cellules de la colonne 4 si leur valeur est supérieure à 1000.",
          "Pour chaque ligne, si la valeur de la colonne D dépasse 1000, mets-la en gras.",
          "Gras les montants supérieurs à 1000 dans la colonne D.",
          "Mets du gras dans toutes cellules de la 4e colonne avec une valeur supérieure à 1000."
        ]
      },
      {"input_data": {"column": "2", "threshold": "240"},
        "prompts": [
          "Mets en gras toutes les cellules de la colonne 2 si leur valeur est supérieure à 240.",
          "Pour chaque ligne, si la valeur de la colonne B dépasse 240, mets-la en gras.",
          "Gras les montants supérieurs à 240 dans la colonne B.",
          "Mets du gras dans toutes cellules de la 2e colonne avec une valeur supérieure à 240."
        ]
      }
    ]
  },
  "alternateRowColors": {
    "description": "Colore les lignes alternées pour améliorer la lisibilité.",
    "function_code": [
      "function alternateRowColors() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getDataRange();",
      "  const numRows = range.getNumRows();",
      "  for (let i = 2; i <= numRows; i += 2) {",
      "    sheet.getRange(i, 1, 1, range.getNumColumns()).setBackground('#f2f2f2');",
      "  }",
      "}"
    ],
    "examples": [
      {"prompts": [
          "Colore les lignes paires pour améliorer la lisibilité.",
          "Mets un fond gris sur une ligne sur deux.",
          "Alterner la couleur de fond des lignes du tableau."
        ]
      }
    ]
  },
  "convertDateFormat": {
    "description": "Convertit toutes les dates d’un format à un autre dans une colonne donnée.",
    "function_code": [
      "function convertDateFormat() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const numRows = sheet.getLastRow();",
      "  for (let i = 2; i <= numRows; i++) {",
      "    const cell = sheet.getRange(i, {column});",
      "    const date = cell.getValue();",
      "    if (date instanceof Date) {",
      "      const formatted = Utilities.formatDate(date, Session.getScriptTimeZone(), '{newFormat}');",
      "      cell.setValue(formatted);",
      "    }",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column": "3", "newFormat": "dd/MM/yyyy"},
        "prompts": [
          "Convertis toutes les dates de la colonne 3 au format jj/MM/aaaa.",
          "Change le format des dates de la colonne C en jour/mois/année.",
          "Reformate toutes les dates de la colonne C en dd/MM/yyyy."
        ]
      },
      {"input_data": {"column": "6", "newFormat": "yyyy/MM/dd"},
        "prompts": [
          "Convertis toutes les dates de la colonne 6 au format aaaa/MM/jj.",
          "Change le format des dates de la colonne F en année/mois/jour.",
          "Reformate toutes les dates de la colonne F en yyyy/MM/dd."
        ]
      }
    ]
  },
  "createChartFromRange": {
    "description": "Génère un graphique à partir des données d’une plage.",
    "function_code": [
      "function createChartFromRange() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getRange({range});",
      "  const chart = sheet.newChart()",
      "    .setChartType(Charts.ChartType.{chartType})",
      "    .addRange(range)",
      "    .setPosition(2, 5, 0, 0)",
      "    .build();",
      "  sheet.insertChart(chart);",
      "}"
    ],
    "examples": [
      {"input_data": {"range": "A1:B10", "chartType": "COLUMN"},
        "prompts": [
          "Génère un graphique en colonnes à partir des données de A1 à B10.",
          "Crée un graphique colonne pour la plage A1:B10.",
          "Ajoute un graphique basé sur les valeurs de A1 à B10."
        ]
      },
      {"input_data": {"range": "C2:D20", "chartType": "LINE"},
        "prompts": [
          "Crée un graphique en courbes pour les données de C2 à D20.",
          "Ajoute un graphique ligne pour la plage C2:D20.",
          "Génère un graphique à partir des colonnes C et D."
        ]
      }
    ]
  },
  "sumColumnAtBottom": {
    "description": "Ajoute le total de toutes les valeurs d'une colonne en bas de celle-ci.",
    "function_code": [
      "function sumColumnAtBottom() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const numRows = sheet.getLastRow();",
      "  let sum = 0;",
      "  for (let i = 2; i <= numRows; i++) {",
      "    const value = sheet.getRange(i, {column}).getValue();",
      "    if (!isNaN(value)) sum += Number(value);",
      "  }",
      "  sheet.getRange(numRows + 1, {column}).setValue(sum);",
      "}"
    ],
    "examples": [
      {"input_data": {"column": "4"},
        "prompts": [
          "Ajoute le total de la colonne 4 en bas de celle-ci.",
          "Calcule la somme de la colonne D et écris-la à la fin.",
          "Insère le total des montants de la colonne D sous les données.",
          "Calcule moi le total de la 4e colonne et ajoute le résultat en desssous de celle-ci."
        ]
      },
      {"input_data": {"column": "2"},
        "prompts": [
          "Ajoute le total de la colonne 2 en bas de celle-ci.",
          "Calcule la somme de la colonne B et écris-la à la fin.",
          "Insère le total des valeurs de la colonne B sous les données.",
          "Calcule moi le total de la 2e colonne et ajoute le résultat en desssous de celle-ci."
        ]
      }
    ]
  },
  "findRowsWithValue": {
    "description": "Recherche toutes les lignes contenant une valeur spécifique dans une colonne.",
    "function_code": [
      "function findRowsWithValue() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const column = {column};",
      "  const value = '{value}';",
      "  const numRows = sheet.getLastRow();",
      "  for (let i = 2; i <= numRows; i++) {",
      "    if (sheet.getRange(i, column).getValue() == value) {",
      "      sheet.getRange(i, 1, 1, sheet.getLastColumn()).setBackground('#ffff00');",
      "    }",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column": "3", "value": "Urgent"},
        "prompts": [
          "Surligne toutes les lignes où la colonne 3 contient 'Urgent'.",
          "Trouve les lignes avec 'Urgent' dans la colonne C et mets-les en jaune.",
          "Recherche les lignes contenant 'Urgent' dans la colonne C."
        ]
      }
    ]
  },
  "deleteEmptyRows": {
    "description": "Supprime toutes les lignes vides de la feuille.",
    "function_code": [
      "function deleteEmptyRows() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const data = sheet.getDataRange().getValues();",
      "  for (let i = data.length; i >= 1; i--) {",
      "    if (data[i-1].every(cell => cell === '' || cell === null)) {",
      "      sheet.deleteRow(i);",
      "    }",
      "  }",
      "}"
    ],
    "examples": [
      {"prompts": [
          "Supprime toutes les lignes vides de la feuille.",
          "Efface les lignes sans données.",
          "Nettoie la feuille en retirant les lignes entièrement vides."
        ]
      }
    ]
  },
  "concatColumns": {
    "description": "Concatène deux colonnes et stocke le résultat dans une nouvelle colonne.",
    "function_code": [
      "function concatColumns() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const numRows = sheet.getLastRow();",
      "  for (let i = 2; i <= numRows; i++) {",
      "    const valA = sheet.getRange(i, {column_A}).getValue();",
      "    const valB = sheet.getRange(i, {column_B}).getValue();",
      "    sheet.getRange(i, {column_result}).setValue(valA + ' ' + valB);",
      "  }",
      "}"
    ],
    "examples": [
      {"input_data": {"column_A": "1", "column_B": "2", "column_result": "5"},
        "prompts": [
          "Concatène les colonnes 1 et 2 et écris le résultat dans la colonne 5.",
          "Pour chaque ligne, fusionne la colonne A et la colonne B dans la colonne E.",
          "Ajoute une colonne E avec la concaténation de A et B."
        ]
      },
      {"input_data": {"column_A": "3", "column_B": "4", "column_result": "5"},
        "prompts": [
          "Concatène les colonnes 3 et 4 et écris le résultat dans la colonne 5.",
          "Pour chaque ligne, fusionne la colonne C et la colonne D dans la colonne E.",
          "Ajoute une colonne E avec la concaténation de C et D."
        ]
      }
    ]
  },
  "conditionalFormat": {
    "description": "Applique une mise en forme conditionnelle à une colonne selon une règle.",
    "function_code": [
      "function conditionalFormat() {",
      "  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();",
      "  const range = sheet.getRange(2, {column}, sheet.getLastRow()-1, 1);",
      "  range.setConditionalFormatRules([",
      "    SpreadsheetApp.newConditionalFormatRule()",
      "      .whenNumberGreaterThan({threshold})",
      "      .setBackground('#ffcccc')",
      "      .setRanges([range])",
      "      .build()",
      "  ]);",
      "}"
    ],
    "examples": [
      {"input_data": {"column": "4", "threshold": "500"},
        "prompts": [
          "Mets en rouge les cellules de la colonne 4 si leur valeur dépasse 500.",
          "Applique une mise en forme conditionnelle sur la colonne D pour les valeurs > 500.",
          "Colore en rouge les montants supérieurs à 500 dans la colonne D."
        ]
      }
    ]
  }
}
